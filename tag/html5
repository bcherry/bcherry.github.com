<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Adequately Good - Posts tagged “html5”</title>

    <!-- CSS, including Blueprint, jQuery w/Smoothness, and AG CSS -->
    <link rel="stylesheet" href="/css/blueprint/blueprint.min.css" media="screen, projection" />
    <link rel="stylesheet" href="/css/blueprint/print.min.css" media="print" />
    <!--[if lt IE 8]>
      <link rel="stylesheet" href="/css/blueprint/ie.css" media="screen, projection">
    <![endif]-->
    <link rel="stylesheet" href="/css/jquery-ui-smoothness/jquery-ui-1.7.2.custom.min.css" />
    <link rel="stylesheet" href="/css/ag.css" media="screen" />

    <!-- Extra <head> Links -->
    <link rel="alternate" type="application/atom+xml" title="Adequately Good Atom Feed" href="" />

    <!-- TODO: favicon -->

    <!-- IE HTML5 Compatibility -->
    <!--[if IE]>
      <script type="text/javascript">
        (function () {
          var tags = "header hgroup nav article time footer".split(" "),
            i = 0,
            l = tags.length;
          for (; i < l; i += 1) {
            document.createElement(tags[i]);
          }
        }());
      </script>
    <![endif]-->
  </head>
  <body>
    <a name="top"></a>
    <div id="container" class="container">

      <!-- Header -->
      <header class="span-24 last">
        <!-- Title -->
        <div id="title" class="span-24 last">
          <div class="span-17 colborder prepend-top append-bottom">
            <hgroup>
              <h1>
                <a href="/">adequately good</a>
              </h1>
              <h3 class="prepend-2 alt">decent programming advice</h3>
            </hgroup>
          </div>
          <div class="span-6 last prepend-top append-bottom">
            <h2>
              written by
              <a href="http://twitter.com/bcherry">ben cherry</a>
            </h2>
          </div>
        </div>

        <hr />

        <!-- Navigation Bar -->
        <nav class="prepend-2 span-20 append-2 last append-bottom">
          <div class="span-5">
            <a href="/">home</a>
          </div>
          <div class="span-5">
            <a href="#" id="archiveLink">archives</a>
          </div>
          <div class="span-5">
            <a href="/About-Ben">about</a>
          </div>
          <div class="span-5 last">
            <a href="">feed</a>
          </div>
        </nav>

        <!-- Archives Links -->
        <div id="archives" class="span-24 last smallalts" style="display:none;">
          <hr />
          <div class="archivelinks">
            <span class="alt">posts by year</span>
            
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
                  <a class="tight" href="/2009">2009</a>
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
                  <a class="tight" href="/2010">2010</a>
                
              
            
              
                
                
                
              
            
              
                
                
                
                  <a class="tight" href="/2011">2011</a>
                
              
            
          </div>
        </div>

        <hr />
      </header>

      <div id="colcontainer" class="span-24 last">
        <!-- Main content: Posts, etc. -->
        <div id="content" class="span-17 colborder">
          <a name="main"></a>
          <div class="smallalts listing">
  <span class="alt">all posts filed under</span>
  <a class="tight" href="/tags/html5">html5</a>
</div>

  

  
    <article class="span-17 last">
  <header class="span-17 last">
  
    <time class="alt" datetime="2011-02-11" pubdate>2011-02-11</time>
  
  <h1><a href="/2011/2/Thoughts-on-the-Hashbang">Thoughts on the Hashbang</a></h1>
</header>
  <div class="span-17 last entry">
    <p>There&#8217;s <a href='http://isolani.co.uk/blog/javascript/BreakingTheWebWithHashBangs'>been</a> <a href='http://adactio.com/journal/4346/'>a</a> <a href='http://simonwillison.net/tags/hashbanghell/'>lot</a> <a href='http://www.tbray.org/ongoing/When/201x/2011/02/09/Hash-Blecch'>of</a> <a href='http://groups.google.com/group/jsmentors/browse_thread/thread/e493573c4de5d5f9?hl=en_US'>discussion</a> this week about the &#8220;hashbang&#8221;, that ugly little bit you find in the middle of URLs like this one: <a href='http://twitter.com/#!/ded/status/18308450276'>http://twitter.com/#!/ded/status/18308450276</a>. I wanted to provide a rebuttal to the arguments that the hashbang is bad for the Web, based on a lot of discussions we&#8217;ve been having inside Twitter since the #newtwitter project began last summer, and have continued right up until today.</p>

<h2 id='its_not_about_the_hashbang'>It&#8217;s Not About the Hashbang</h2>

<p>The hashbang is in the unfortunate position of being the messenger of a big change that&#8217;s been slowly occurring on the Web in the past few years, and will only continue to pick up steam: many Web domains are now serving <a href='http://itsnat.sourceforge.net/php/spim/spi_manifesto_en.php'>desktop-class applications</a> via HTTP, instead of traditional Web sites. For instance, twitter.com is no longer a collection of Web pages that represent a Web site, but is simply an application that you happen to launch by pointing a browser at <a href='http://twitter.com'>http://twitter.com</a>*. This has many wide-reaching implications, and the hashbang is merely a side-effect. In this way, the hashbang is an easy-to-hate straw-man, whereas the real debate to be had is about this shift towards applications.</p>

<h2 id='why_applications_on_the_web'>Why Applications on the Web?</h2>

<p>Services such as Twitter, Flickr, Facebook, and others have every reason to build rich applications. An application allows an experience that is faster, more seamless, and much better for users than traditional Web sites. However, we do not have to choose to host our apps on the Web, and could easily use other options, such as building a native OS application, or using another cross-platform platform such as Adobe AIR. We all choose Web applications however, because the Web is ubiquitous, well-understood, and mostly superior to other application delivery options.</p>

<p>We get URLs in our Web applications as a legacy of Web sites, and this feature is unique to this class of applications. The power of URLs bring benefits like bookmarks, sharing of application states for free, and search engine indexing. Unfortunately, supporting a standard URL structure for this type of application is not possible in current browsers, without using the URL hash. So, we use the URL hash to take advantage of this sort of thing, but not because we believe our application to be a traditional Web site. We do lose indexability and some other benefits of HTTP we may otherwise have, but these are not losses to our application, since we did not have to use a URL at all. Google has <a href='http://googlewebmastercentral.blogspot.com/2009/10/proposal-for-making-ajax-crawlable.html'>thankfully provided</a> <a href='http://code.google.com/web/ajaxcrawling/docs/getting-started.html'>an implementation for crawling applications</a>, based on the hashbang, which brings search engine indexing to the URL hash, and is easy enough to implement.</p>

<h2 id='the_tradeoff'>The Tradeoff</h2>

<p>We&#8217;ve made a tradeoff, however, in making twitter.com into an application using the hash, which is that it now cannot be both an app and a site at the same time. This capability might not sound compelling, but it is. For instance, browsers without JavaScript cannot access content that has been shared using the URL hash, since that is a marker to the JS app, not to a Web page. In a perfect world, we would have been able to use the original URL structure with the hashes for our application, and served both the site and the app simultaneously. This would be the absolute best thing for users of all kinds, and this debate would not be happening.</p>

<p>There is hope on the horizon, in the form of the HTML5 History API. This new browser feature will allow developers to change the entire URL path and query string without incurring a page refresh. By using this, we could drop the hash, and get all the benefits of traditional Web sites with all the benefits of a desktop-class application. Support for this has been in Chrome and Safari for some time (albeit with <a href='https://bugs.webkit.org/show_bug.cgi?id=42940'>a bug we found</a> (now fixed)), and will arrive in Firefox 4. Internet Explorer currently has no plans to implement this in IE9, which is a shame. Had it not been for the bug we found, we would have shipped #newtwitter with HTML5 History on day one (and in fact, the integration is already built).</p>

<h2 id='the_hashbang_is_a_good_thing'>The Hashbang is a Good Thing</h2>

<p>It&#8217;s not perfect. It&#8217;s not pretty (despite what Google says). But the hashbang is useful. Users benefit from the trend towards full-fledged applications, with increased speed and functionality. URLs are not necessary in this context, but we provide them (via the hash) because they bring tangible benefits for applications. The hashbang also brings a tangible benefit. Someday, we will hopefully be rid of the thing, when HTML5 History (or <a href='http://www.adequatelygood.com/2010/7/Saner-HTML5-History-Management'>something like it</a>) is standard in all browsers. The Web application is not going anywhere, and the hash is a fact of life.</p>
<span class='note'><em>* Technically, twitter.com does still host a Web site.  For instance, <a href='http://twitter.com/jobs'>twitter.com/jobs</a> is a normal Web page, as is <a href='http://twitter.com/bcherry'>twitter.com/bcherry</a> when viewed logged-out.  We have, however, begun serving an application to logged-in visitors.</em></span>
  </div>
</article>

  

  
    <article class="span-17 last">
  <header class="span-17 last">
  
    <time class="alt" datetime="2010-07-25" pubdate>2010-07-25</time>
  
  <h1><a href="/2010/7/Saner-HTML5-History-Management">Saner HTML5 History Management</a></h1>
</header>
  <div class="span-17 last entry">
    <h2 id='hashchange'>Hashchange</h2>

<p>This event is quite simple. Whenever the <code>window.location.hash</code> property changes, by following a link, setting the property, editing the URL bar, or using back/forward to move through browser history, the &#8220;hashchange&#8221; event is fired from the window. Using it is really easy:</p>

<pre><code>window.onhashchange = function() {
	alert(&quot;hash changed!&quot;);
};
window.location.hash = Math.random(); // alerts &quot;hash changed!&quot;</code></pre>

<p>This feature is implemented in recent versions of all major browsers. In older browsers like Internet Explorer 6 and 7, you can easily provide it by polling the hash property on an interval, and manually firing an event when it changes. This is easy to build into a jQuery plugin, which <a href='http://benalman.com/'>Ben Alman</a> did in the robust <a href='http://benalman.com/projects/jquery-hashchange-plugin/'>jquery.hashchange.js plugin</a>.</p>

<h2 id='history_management'>History Management</h2>

<p>This feature is a bit more complex. Browsers that support it add a <code>window.history</code> object, with the following properties:</p>

<ul>
<li><code>window.history.back()</code> and <code>window.history.forward()</code>, which provide programmatic interfaces to browser back and forward functions.</li>

<li><code>window.history.pushState(stateObj, title, url)</code>. This method pushes a new entry into the browser history, which then becomes the browser&#8217;s current state. You can provide any JSON-stringifiable object to send with it, and the browser will provide that object again when you navigate to that point (more on that in a bit). More importantly, if you provide a URL, the browser will change the URL displayed in the address bar, without reloading the page. The new URL must be on the same domain, but you can change the rest of it, which is the <code>window.location.pathname</code> and <code>window.location.hash</code>. Changing the URL in this way will not trigger a &#8220;hashchange&#8221; event, though.</li>

<li><code>window.history.replaceState(stateObj, title, url)</code>. This is just like <code>window.history.pushState</code>, except that the current browser state is removed from the history, so you cannot hit &#8220;back&#8221; to return to it.</li>

<li><code>window.onpopstate</code>. This event is fired whenever a state object is removed from the browser history, which occurs on browser &#8220;back&#8221; or &#8220;forward&#8221;. State objects are persisted on the user&#8217;s hard disk between sessions, which is a nice feature. The object passed into a call to <code>pushState</code> or <code>replaceState</code> is provided as the <code>state</code> property on the event object in the &#8220;popstate&#8221; event.</li>
</ul>

<p>This feature is implemented in the latest versions of WebKit, which includes Safari and Chrome. Additionally, the Firefox 4 betas include support for this.</p>

<h2 id='whats_the_use_case'>What&#8217;s the Use Case?</h2>

<p>The new history management stuff is very promising, because it allows a web application to live across many physical URLs, but be run in a single instance. This is important for certain kinds of applications, where using hashes is not universally suitable.</p>

<p>For instance, at Twitter, we currently update your URL hash as you navigate around the application, to make bookmarkable pages like <a href='http://twitter.com/#replies'>http://twitter.com/#replies</a>. However, we force a full page load for certain pages, most notably profile pages (e.g. <a href='http://twitter.com/bcherry'>http://twitter.com/bcherry</a>) and permalink pages (e.g. <a href='http://twitter.com/bcherry/status/18966802499'>http://twitter.com/bcherry/status/18966802499</a>). This is so that those URLs can be copied from the address bar and posted on the web.</p>

<p>We want to make sure that users without JavaScript and search engine bots crawling links to our site will get the correct page from the server (since the browser does not send a hash along to the server). This would not be possible if those URLs used hashes. Unfortunately, this means the application is slower, because a full page load is needed going into and out of those locations.</p>

<p>This is where HTML5 History Management could be useful.</p>

<h2 id='so_whats_the_problem'>So What&#8217;s the Problem?</h2>

<p>Unfortunately, the existing implementation of history management is not useful, and not in the spirit of the web.</p>

<p>Our web applications should be built to respond to a URL. Both the client and server versions of an application should understand a shared URL structure, and know how to present the same page to the browser that reflects that URL.</p>

<p>Allowing developers to store extra state information in the browser history is missing the point. The only thing stored in history should be a URL, and the browser can associate a title with it if it chooses.</p>

<p>This is RESTful design, mirrored on client and server. Modern browsers can support changing the URL without reloading the page from the server, and older ones can continue to hit the server every time.</p>

<p>In this way, we can build applications that degrade correctly in older browsers, and when viewed by bots, while providing a faster experience for users with modern browsers.</p>

<h2 id='enter_pathchange'>Enter &#8220;pathchange&#8221;</h2>

<p>Both &#8220;hashchange&#8221; and <code>pushState</code>/&#8221;popstate&#8221; should be replaced with &#8220;pathchange&#8221;, which is an event that fires when the URL changes in any way. This event does not provide any information, the application should inspect the current URL to discover the state it should enter. Relative links within a page should not force page reloads, they should instead just trigger the &#8220;pathchange&#8221; event.</p>

<p>It turns out that it&#8217;s possible to implement this event in modern browsers now, based on the features they already have. Here&#8217;s how:</p>

<ol>
<li>Listen to &#8220;hashchange&#8221;, and trigger &#8220;pathchange&#8221; when it occurs</li>

<li>Poll the hash in browsers without &#8220;hashchange&#8221; support, and trigger &#8220;hashchange&#8221;, which triggers &#8220;pathchange&#8221;</li>

<li>With history support, listen to &#8220;popstate&#8221;, and trigger &#8220;pathchange&#8221; when it occurs</li>

<li>With history support, intercept all relative links when they are clicked, and prevent normal navigation. Call <code>window.history.pushState(null, null, href)</code> instead, and trigger a &#8220;pathchange&#8221;.</li>

<li>Provide a helper function to make navigation to new URLs using <code>window.history.pushState</code>, when supported, easy.</li>
</ol>

<p>I&#8217;ve implemented all of this as a <a href='http://www.bcherry.net/static/lib/js/jquery.pathchange.js'>jQuery plugin</a> that is quite easy to use:</p>

<pre><code>$(function() {
	$.pathchange.init(); // setup event listeners, etc.
	$(window).pathchange(function() {
		respondToUrl();
	}).trigger(&quot;pathchange&quot;);

	$.pathchange.changeTo(&quot;/foo&quot;);
});</code></pre>

<p>I&#8217;ve also created a demo page that presents <a href='http://www.bcherry.net/playground/sanerhtml5history'>A Saner HTML5 History App</a> that uses <a href='http://www.bcherry.net/static/lib/js/jquery.pathchange.js'>jquery.pathchange.js</a> under the hood. Check it out in various browsers to see the HTML5 magic at work, and be sure to use your browser &#8220;back&#8221; and &#8220;forward&#8221; buttons, and reload the page a few times.</p>

<p>That&#8217;s my take on the HTML5 history features. It&#8217;s unfortunate that what the browsers are implementing is not what we really need, but it&#8217;s encouraging that they do provide enough to implement what we do really need. Let me know in the comments if you agree, disagree, or have questions about my approach.</p>
<span class='note'>___Note Number One: It's also worth pointing out that I discovered a [serious bug](https://bugs.webkit.org/show_bug.cgi?id=42940) in WebKit's implementation of history management while working on this today.  In short, the "popstate" event is often lost when the network is occupied, which makes little sense.  [Here's a demo page with a reproducible case](http://www.bcherry.net/playground/pushstate) that I threw together.  It fires off a request to download an image which takes 1s on every "popstate", which means hitting "back" more than once every second leads to lost history entries and an application that gets out of sync with the URL.  You could work around this by polling the URL in addition to listening to "popstate", but it's not a good workaround.  Until this is fixed, you'll have to be wary of this if you ship this feature to your users, and it probably is not suitable for very complex AJAX apps.  Firefox 4 does not have the same problem.___</span><span class='note'>___Note Number 2: This article was originally published around 4am PST on July 26th.  The author published a revision around 8pm PST the following day, to make it a little less incohorent and a little more useful.  Luckily, the author uses Git to prepare Markdown-formatted articles, so you can [view the diff](http://github.com/bcherry/adequatelygood/commit/eb688c7809e8d5f61f9ed12442d3a578d46fab97) if you'd like to find out what changed.___</span>
  </div>
</article>

  

  

  

  

  

  

  

  

  

  

  
    <article class="span-17 last">
  <header class="span-17 last">
  
    <time class="alt" datetime="2010-02-19" pubdate>2010-02-19</time>
  
  <h1><a href="/2010/2/This-Blog-Now-With-HTML5">This Blog - Now With HTML5</a></h1>
</header>
  <div class="span-17 last entry">
    <p>Take a look at this web site. Notice anything out of the ordinary. Hopefully you don&#8217;t, none of the layout or styling has changed noticeably recently. However, try a &#8220;View Source&#8221;. Now do you see something different? This page is now rendered with the following doctype:</p>

<pre><code>&lt;!DOCTYPE html&gt;</code></pre>

<p>That&#8217;s right, this web site is now HTML5! In fact it even <a href='http://validator.w3.org/check?uri=http%3A%2F%2Fwww.adequatelygood.com'>validates as HTML5</a> successfully! If you dig past the doctype, you&#8217;ll find all sorts of HTML5 semantic elements, including <code>&lt;nav&gt;</code>, <code>&lt;article&gt;</code>, and <code>&lt;time&gt;</code>, among others. Making the transition was reasonably painless with the help of Mark Pilgrim&#8217;s <a href='http://diveintohtml5.org/semantics.html'>excellent article on making the switch</a>. For the most part, I just had to change a few elements and rewrite my CSS. There were a few headaches because <a href='http://blueprintcss.org'>Blueprint CSS</a> expects your grid elements to be <code>&lt;div&gt;</code>s, but the following CSS added the right capabilities to my semantic elements to be compatible with Blueprint:</p>

<pre><code>header, footer, nav, article {
	float: left;
	margin-right: 10px;
}</code></pre>

<p>Of course, IE doesn&#8217;t understand the new HTML5 elements. Luckily, there&#8217;s an easy solution. I chose to write it myself, since it&#8217;s so simple, but there&#8217;s a <a href='http://html5shiv.googlecode.com/svn/trunk/html5.js'>publicly available complete solution</a> you can use as well. Here&#8217;s mine, for reference (in the <code>&lt;head&gt;</code>):</p>

<pre><code>&lt;!-- IE HTML5 Compatibility --&gt;
&lt;!--[if IE]&gt;
	&lt;script type=&quot;text/javascript&quot;&gt;
		(function () {
			var tags = &quot;header hgroup nav article time footer&quot;.split(&quot; &quot;),
				i = 0,
				l = tags.length;
			for (; i &lt; l; i += 1) {
				document.createElement(tags[i]);
			}
		}());
	&lt;/script&gt;
&lt;![endif]--&gt;</code></pre>

<p>And that&#8217;s all there was to it! It&#8217;s great that you can start using basic HTML5 <em>right now</em> without any difficulties, and it will work in all browsers, even IE6! Of course, you can&#8217;t just start using the more advanced features like <code>&lt;video&gt;</code> or Web Workers, but basic markup is a great start.</p>

<p>So what do you think? You ready to upgrade your own personal site?</p>
  </div>
</article>

  

  

  

  

  

  

  

  

  

  


        </div>

        <!-- Sidebar: Search, links, etc. -->
        <div id="sidebar" class="span-6 last">
          <hr class="space" />

          <div id="links">
            <h3>the author</h3>
            <p>
              Ben is a 25 year-old software engineer. He lives and works in San Francisco. Many people think he invented the term "hoisting" in JavaScript, but this is untrue.
            </p>
            <ul>
              <li><a href="http://twitter.com/bcherry">Twitter</a> - @<a class="twitter-anywhere-user" href="http://twitter.com/bcherry">bcherry</a></li>
              <li><a href="http://github.com/bcherry">GitHub</a> - My Code</li>
              <li><a href="http://www.linkedin.com/in/bcherryprogrammer">LinkedIn</a> - Professional Profile</li>
              <li><a href="http://www.facebook.com/bcherry">Facebook</a> - That Other Social Network</li>
              <li><a href="http://www.bcherry.net/talks/">Presentations</a> - Slides From My Talks</li>
            </ul>
            <iframe allowtransparency="true" frameborder="0" scrolling="no"
              src="http://platform.twitter.com/widgets/follow_button.html?screen_name=bcherry&amp;button=grey&amp;text_color=7F7F7F&amp;link_color=666666"
              style="width:300px; height:20px;"></iframe>
          </div>

          <hr />

          <div id="tags">
            <h3>categories</h3>
            <ul>
            
              <li>
                <a href="/tag/javascript">javascript</a>
                (18)
              </li>
            
              <li>
                <a href="/tag/social%20gaming">social gaming</a>
                (1)
              </li>
            
              <li>
                <a href="/tag/performance">performance</a>
                (4)
              </li>
            
              <li>
                <a href="/tag/jquery">jquery</a>
                (1)
              </li>
            
              <li>
                <a href="/tag/tools">tools</a>
                (2)
              </li>
            
              <li>
                <a href="/tag/html5">html5</a>
                (3)
              </li>
            
              <li>
                <a href="/tag/adequatelygood">adequatelygood</a>
                (1)
              </li>
            
              <li>
                <a href="/tag/timers">timers</a>
                (2)
              </li>
            
              <li>
                <a href="/tag/module%20pattern">module pattern</a>
                (3)
              </li>
            
              <li>
                <a href="/tag/talks">talks</a>
                (1)
              </li>
            
              <li>
                <a href="/tag/slide">slide</a>
                (1)
              </li>
            
              <li>
                <a href="/tag/python">python</a>
                (1)
              </li>
            
              <li>
                <a href="/tag/debugging">debugging</a>
                (1)
              </li>
            
              <li>
                <a href="/tag/testing">testing</a>
                (2)
              </li>
            
              <li>
                <a href="/tag/hashbang">hashbang</a>
                (1)
              </li>
            
            </ul>
          </div>

          <hr />

          
        </div>
      </div>
    </div>

    <!-- Exception Hub start -->
    <script src="http://js.exceptionhub.com/javascripts/eh.js"></script>
    <script>
    ExceptionHub.setup("8ff0f84d25456b049a9c1a83f8e62b56", 21, 'production');
    </script>
    <!-- Exception Hub end -->

    <script type="text/javascript" src="/js/jquery-1.3.2.min.js"></script>
    <!--<script type="text/javascript" src="/js/chili/jquery.chili-2.2.js"></script>-->
    <script type="text/javascript" src="/js/consul.js"></script>
    <script type="text/javascript">
      // ChiliBook.recipeFolder = "/js/chili/";
      consul.turnOn();
      jQuery.noConflict();

      var AG = {};
      // Page Script
    </script>

    <!-- Include LABjs and request the rest of the script files-->
    <script type="text/javascript" src="/js/LAB.min.js"></script>
    <script type="text/javascript">
      $LAB
      .script("/js/jquery-ui-1.7.2.custom.min.js")
      .script("/js/jquery.templates.js")
      .script("/js/base.js")
      .script("/js/ag.js")
    </script>

    <!-- Google Analytics -->
    <script type="text/javascript">var _gaq =_gaq||[]; _gaq.push(['_setAccount','UA-251077-4']);_gaq.push(['_trackPageview']);(function(){var ga=document.createElement('script');ga.type='text/javascript';ga.async=true;ga.src=('https:'==document.location.protocol?'https://ssl':'http://www')+'.google-analytics.com/ga.js';(document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(ga);})();</script>
  </body>
</html>
