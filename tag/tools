<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Adequately Good - Posts tagged “tools”</title>

    <!-- CSS, including Blueprint, jQuery w/Smoothness, and AG CSS -->
    <link rel="stylesheet" href="/css/blueprint/blueprint.min.css" media="screen, projection" />
    <link rel="stylesheet" href="/css/blueprint/print.min.css" media="print" />
    <!--[if lt IE 8]>
      <link rel="stylesheet" href="/css/blueprint/ie.css" media="screen, projection">
    <![endif]-->
    <link rel="stylesheet" href="/css/jquery-ui-smoothness/jquery-ui-1.7.2.custom.min.css" />
    <link rel="stylesheet" href="/css/ag.css" media="screen" />

    <!-- Extra <head> Links -->
    <link rel="alternate" type="application/atom+xml" title="Adequately Good Atom Feed" href="" />

    <!-- TODO: favicon -->

    <!-- IE HTML5 Compatibility -->
    <!--[if IE]>
      <script type="text/javascript">
        (function () {
          var tags = "header hgroup nav article time footer".split(" "),
            i = 0,
            l = tags.length;
          for (; i < l; i += 1) {
            document.createElement(tags[i]);
          }
        }());
      </script>
    <![endif]-->
  </head>
  <body>
    <a name="top"></a>
    <div id="container" class="container">

      <!-- Header -->
      <header class="span-24 last">
        <!-- Title -->
        <div id="title" class="span-24 last">
          <div class="span-17 colborder prepend-top append-bottom">
            <hgroup>
              <h1>
                <a href="/">adequately good</a>
              </h1>
              <h3 class="prepend-2 alt">decent programming advice</h3>
            </hgroup>
          </div>
          <div class="span-6 last prepend-top append-bottom">
            <h2>
              written by
              <a href="http://twitter.com/bcherry">ben cherry</a>
            </h2>
          </div>
        </div>

        <hr />

        <!-- Navigation Bar -->
        <nav class="prepend-2 span-20 append-2 last append-bottom">
          <div class="span-5">
            <a href="/">home</a>
          </div>
          <div class="span-5">
            <a href="#" id="archiveLink">archives</a>
          </div>
          <div class="span-5">
            <a href="/About-Ben">about</a>
          </div>
          <div class="span-5 last">
            <a href="">feed</a>
          </div>
        </nav>

        <!-- Archives Links -->
        <div id="archives" class="span-24 last smallalts" style="display:none;">
          <hr />
          <div class="archivelinks">
            <span class="alt">posts by year</span>
            
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
                  <a class="tight" href="/2009">2009</a>
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
              
            
              
                
                
                
                  <a class="tight" href="/2010">2010</a>
                
              
            
              
                
                
                
              
            
              
                
                
                
                  <a class="tight" href="/2011">2011</a>
                
              
            
          </div>
        </div>

        <hr />
      </header>

      <div id="colcontainer" class="span-24 last">
        <!-- Main content: Posts, etc. -->
        <div id="content" class="span-17 colborder">
          <a name="main"></a>
          <div class="smallalts listing">
  <span class="alt">all posts filed under</span>
  <a class="tight" href="/tags/tools">tools</a>
</div>

  

  

  

  
    <article class="span-17 last">
  <header class="span-17 last">
  
    <time class="alt" datetime="" pubdate>2010-07-08</time>
  
  <h1><a href="tag/tools">Writing Testable JavaScript</a></h1>
</header>
  <div class="span-17 last entry">
    <p>The engineering culture at Twitter requires tests. Lots of tests. I haven&#8217;t had formal experience with JavaScript testing before Twitter, so I&#8217;ve been learning a lot as I go. In particular, a number of patterns I used to use, write about, and encourage have turned out to be bad for writing testable code. So I thought it would be worthwhile to share a few of the most important principles I&#8217;ve developed for writing testable JavaScript. The examples I provide are based on <a href='http://docs.jquery.com/QUnit'>QUnit</a>, but should be just as applicable to any JavaScript testing framework.</p>

<h2 id='avoid_singletons'>Avoid Singletons</h2>

<p>One of my most popular posts was about using <a href='http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth'>JavaScript Module Pattern</a> to create powerful <strong>singletons</strong> in your application. This approach can be simple and useful, but it creates problems for testing, for one simple reason: <strong><em>singletons suffer state pollution between tests</em></strong>. Rather than creating your singletons as modules, you should compose them as constructable objects, and assign a single, default instance at the global level in your application init.</p>

<p>For example, consider the following singleton module (contrived example, of course):</p>

<pre><code>var dataStore = (function() {
	var data = [];
	return {
		push: function (item) {
			data.push(item);
		},
		pop: function() {
			return data.pop();
		},
		length: function() {
			return data.length;
		}
	};
}());</code></pre>

<p>With this module, we may wish to test the <code>foo.bar</code> method. Here&#8217;s a simple QUnit test suite:</p>

<pre><code>module(&quot;dataStore&quot;);
test(&quot;pop&quot;, function() {
	dataStore.push(&quot;foo&quot;);
	dataStore.push(&quot;bar&quot;)
	equal(dataStore.pop(), &quot;bar&quot;, &quot;popping returns the most-recently pushed item&quot;);
});

test(&quot;length&quot;, function() {
	dataStore.push(&quot;foo&quot;);
	equal(dataStore.length(), 1, &quot;adding 1 item makes the length 1&quot;);
});</code></pre>

<p>When running this test suite, the assertion in the <code>length</code> test will fail, but it&#8217;s not clear from looking at it why it should. The problem is that state has been left in <code>dataStore</code> from the previous test. Merely re-ordering these tests will cause the <code>length</code> test to pass, which is a clear red flag that something is wrong. We could fix this with setup or teardown that reverts the state of <code>dataStore</code>, but that means that we need to constantly maintain our test boilerplate as we make implementation changes in the <code>dataStore</code> module. A better approach is the following:</p>

<pre><code>function newDataStore() {
	var data = [];
	return {
		push: function (item) {
			data.push(item);
		},
		pop: function() {
			return data.pop();
		},
		length: function() {
			return data.length;
		}
	};
}

var dataStore = newDataStore();</code></pre>

<p>Now, your test suite will look like this:</p>

<pre><code>module(&quot;dataStore&quot;);
test(&quot;pop&quot;, function() {
	var dataStore = newDataStore();
	dataStore.push(&quot;foo&quot;);
	dataStore.push(&quot;bar&quot;)
	equal(dataStore.pop(), &quot;bar&quot;, &quot;popping returns the most-recently pushed item&quot;);
});

test(&quot;length&quot;, function() {
	var dataStore = newDataStore();
	dataStore.push(&quot;foo&quot;);
	equal(dataStore.length(), 1, &quot;adding 1 item makes the length 1&quot;);
});</code></pre>

<p>This allows our global <code>dataStore</code> to behave exactly as it did before, while allowing our tests to avoid polluting each other. Each test owns its own instance of a <code>DataStore</code> object, which will be garbage collected when the test completes.</p>

<h2 id='avoid_closurebased_privacy'>Avoid Closure-based Privacy</h2>

<p>Another pattern I used to promote is <a href='http://www.crockford.com/javascript/private.html'>real private members in JavaScript</a>. The advantage is that you can keep globally-accessible namespaces free of unnecessary references to private implementation details. However, overuse of this pattern can lead to untestable code. This is because <strong><em>your test suite cannot access, and thus cannot test, private functions hidden in closures</em></strong>. Consider the following:</p>

<pre><code>function Templater() {
	function supplant(str, params) {
		for (var prop in params) {
			str.split(&quot;{&quot; + prop +&quot;}&quot;).join(params[prop]);
		}
		return str;
	}

	var templates = {};

	this.defineTemplate = function(name, template) {
		templates[name] = template;
	};

	this.render = function(name, params) {
		if (typeof templates[name] !== &quot;string&quot;) {
			throw &quot;Template &quot; + name + &quot; not found!&quot;;
		}

		return supplant(templates[name], params);
	};
}</code></pre>

<p>The crucial method for our <code>Templater</code> object is <code>supplant</code>, but we cannot access it from outside the closure of the constructor. Thus, a testing suite like QUnit cannot hope to verify that it works as intended. In addition, we cannot verify that our <code>defineTemplate</code> method does anything without trying a <code>.render()</code> call on the template and watching for an exception. We could simply add a <code>getTemplate()</code> method, but then we&#8217;d be adding methods to the public interface solely to allow testing, which is not a good approach. While the issues here are probably just fine in this simple example, building complex objects with important private methods will lead to relying on untestable code, which is a red flag. Here&#8217;s a testable version of the above:</p>

<pre><code>function Templater() {
	this._templates = {};
}

Templater.prototype = {
	_supplant: function(str, params) {
		for (var prop in params) {
			str.split(&quot;{&quot; + prop +&quot;}&quot;).join(params[prop]);
		}
		return str;
	},
	render: function(name, params) {
		if (typeof this._templates[name] !== &quot;string&quot;) {
			throw &quot;Template &quot; + name + &quot; not found!&quot;;
		}

		return this._supplant(this._templates[name], params);
	},
	defineTemplate: function(name, template) {
		this._templates[name] = template;
	}
};</code></pre>

<p>And here&#8217;s a QUnit test suite for it:</p>

<pre><code>module(&quot;Templater&quot;);
test(&quot;_supplant&quot;, function() {
	var templater = new Templater();
	equal(templater._supplant(&quot;{foo}&quot;, {foo: &quot;bar&quot;}), &quot;bar&quot;))
	equal(templater._supplant(&quot;foo {bar}&quot;, {bar: &quot;baz&quot;}), &quot;foo baz&quot;));
});

test(&quot;defineTemplate&quot;, function() {
	var templater = new Templater();
	templater.defineTemplate(&quot;foo&quot;, &quot;{foo}&quot;);
	equal(template._templates.foo, &quot;{foo}&quot;);
});

test(&quot;render&quot;, function() {
	var templater = new Templater();
	templater.defineTemplate(&quot;hello&quot;, &quot;hello {world}!&quot;);
	equal(templater.render(&quot;hello&quot;, {world: &quot;internet&quot;}), &quot;hello internet!&quot;);
});</code></pre>

<p>Notice that our test for <code>render</code> is really just a test that <code>defineTemplate</code> and <code>supplant</code> integrate correctly with each other. We&#8217;ve already tested those methods in isolation, which will allow us to easily discover which components are really breaking when tests of the <code>render</code> method fail.</p>

<h2 id='write_tight_functions'>Write Tight Functions</h2>

<p>Tight functions are important in any language, but JavaScript presents its own reasons to do so. Much of what you do with JavaScript is done against global singletons provided by the environment, and which your test suite relies on. For instance, testing a URL re-writer will be difficult if all of your methods try to assign <code>window.location</code>. Instead, you should <strong><em>break your system into its logical components that decide what to do, then write short functions that actually do it</em></strong>. You can test the logical functions with various inputs and outputs, and leave the final function that modifies <code>window.location</code> untested. Provided you&#8217;ve composed your system correctly, this should be safe.</p>

<p>Here&#8217;s an example URL rewriter that is not testable:</p>

<pre><code>function redirectTo(url) {
	if (url.charAt(0) === &quot;#&quot;) {
		window.location.hash = url;
	} else if (url.charAt(0) === &quot;/&quot;) {
		window.location.pathname = url;
	} else {
		window.location.href = url;
	}
}</code></pre>

<p>The logic in this example is relatively simple, but we can imagine a more complex redirecter. As complexity grows, we will not be able to test this method without causing the window to redirect, thus leaving our test suite entirely.</p>

<p>Here&#8217;s a testable version:</p>

<pre><code>function _getRedirectPart(url) {
	if (url.charAt(0) === &quot;#&quot;) {
		return &quot;hash&quot;;
	} else if (url.charAt(0) === &quot;/&quot;) {
		return &quot;pathname&quot;;
	} else {
		return &quot;href&quot;;
	}
}

function redirectTo(url) {
	window.location[_getRedirectPart(url)] = url;
}</code></pre>

<p>And now we can write a simple test suite for <code>_getRedirectPart</code>:</p>

<pre><code>test(&quot;_getRedirectPart&quot;, function() {
	equal(_getRedirectPart(&quot;#foo&quot;), &quot;hash&quot;);
	equal(_getRedirectPart(&quot;/foo&quot;), &quot;pathname&quot;);
	equal(_getRedirectPart(&quot;http://foo.com&quot;), &quot;href&quot;);
});</code></pre>

<p>Now the meat of <code>redirectTo</code> has been tested, and we don&#8217;t have to worry about accidentally redirecting out of our test suite.</p>
<span class='note'>__Note__: There is an alternative solution, which is to create a `performRedirect` function that does the location change, but stub that out in your test suite.	 This is a common practice for many, but I've been trying to avoid method stubbing.	 I find basic QUnit to work well in all situations I've found so far, and would prefer to not have to remember to stub out a method like that for my tests, but your case may differ.</span>
<h2 id='write_lots_of_tests'>Write Lots of Tests</h2>

<p>This is a no-brainer, but it&#8217;s important to remember. Many programmers write too few tests because writing tests is hard, or lots of work. I suffer from this problem all the time, so I threw together a little helper for QUnit that makes writing lots of tests a lot easier. It&#8217;s a function called <code>testCases</code> which you call within a <code>test</code> block, passing a function, calling context, and array of inputs/outputs to try and compare. You can quickly build up a robust suite for your input/output functions for rigorous testing.</p>

<pre><code>function testCases(fn, context, tests) {
	for (var i = 0; i &lt; tests.length; i++) {
		same(fn.apply(context, tests[i][0]), tests[i][1],
			tests[i][2] || JSON.stringify(tests[i]));
	}
}</code></pre>

<p>And here&#8217;s a simple example use:</p>

<pre><code>test(&quot;foo&quot;, function() {
	testCases(foo, null, [
		[[&quot;bar&quot;, &quot;baz&quot;], &quot;barbaz&quot;],
		[[&quot;bar&quot;, &quot;bar&quot;], &quot;barbar&quot;, &quot;a passing test&quot;]
	]);
});</code></pre>

<h2 id='conclusions'>Conclusions</h2>

<p>There is plenty more to write about testable JavaScript, and I&#8217;m sure there are many good books, but I hope this was a good overview of practical cases I encounter on a daily basis. I&#8217;m by no means a testing expert, so please let me know if I&#8217;ve made mistakes or given bad advice.</p>
  </div>
</article>

  

  

  

  

  

  

  

  

  

  

  
    <article class="span-17 last">
  <header class="span-17 last">
  
    <time class="alt" datetime="" pubdate>2010-02-12</time>
  
  <h1><a href="tag/tools">Finding Improper JavaScript Globals</a></h1>
</header>
  <div class="span-17 last entry">
    <p>When I interview web developers, my first JavaScript question is usually the following:</p>
<blockquote>What is the difference, in JavaScript, between <code class="js inline">x = 1</code> and <code class="js inline">var x = 1</code>.  Feel free to answer in as much or as little detail as you feel comfortable.</blockquote>
<p>Most people would give an answer about how the <code class="js inline">var</code> keyword makes something a local variable, omitting it makes it a global variable.  While I'd love to hear about scope chains, the window object, and hear the term "implied global" in an answer, that basic answer is good enough.  It might not show a thorough knowledge of JavaScript, but at least it shows some level of understanding of the most common dangerous feature.</p>
<p>There are three basic ways to make a global variable in JavaScript.  You can use <code class="js inline">var</code> (<strong>declared global</strong>), you can just assign to it without having declared it (<strong>implied global</strong>), or you can set a property on the <code class="js inline">window</code> object (<strong>window global</strong>).  Here's those three:</p>
<pre class="js">var x = 1; // declared global
y = 2; // implied global
window.z = 3; // window global</pre>
<p>Implied globals are bad because they're hard to keep track of, and their declarations aren't <a href="http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting">hoisted</a>.  I don't like window globals either, because mixing <code class="js inline">window.x</code> and <code class="js inline">x</code> is bad form.  In my opinion, <strong>all globals should be declared globals</strong>.  Unfortunately, JavaScript makes this really hard to maintain.  There are tools like <a href="http://www.jslint.com/">JSLint</a> that will perform analysis of your code and help you out, but it can't do an entire code base at once, at least not easily.</p>
<p>I've written a tool that performs <strong>run-time analysis</strong> of your application, and finds all of the improperly declared globals (both implied and window globals).  Check out a demo <a href="http://www.bcherry.net/badglobals">here</a>.</p>
<h2>Introducing badglobals.js</h2>
<p><a href="http://www.bcherry.net/static/lib/js/badglobals.js">badglobals.js</a> is a tool for finding all of the improperly declared global variables in your application.  Using it is simple, but don't use it in production code (see "How It Works" below).</p>
<ol>
	<li>Include <a href="http://www.bcherry.net/static/lib/js/badglobals.js">badglobals.js</a> in your page, before any other scripts.</li>
	<li>When you want to do analysis, open Firebug and run <code class="js inline">BADGLOBALS.check()</code>.</li>
	<li>You'll see a warning statement in the console for every bad global found.  These contain both the name, and the value.</li>
</ol>
<p>In addition, there are a few slightly more advanced features you might be interested in.</p>
<h3>Exclusions</h3>
<p>If you have some globals you don't want to be reported about (such as third-party libraries), you can easily exclude them manually.  Before you run the check, just call <code class="js inline">.exclude</code>, like so:</p>
<pre class="js">BADGLOBALS.exclude("jQuery", "$", "YAHOO");</pre>
<p>Feel free to call this method as many times as you'd like, it always adds, and never removes.  By default, all browser built-ins are excluded (these are found when the script is included).  Sometimes, the variable <code class="js inline">_firebug</code> enters after the script include, and shows in the report.  You should exclude this.</p>
<h3>Report Object</h3>
<p>While the warnings are probably enough, badglobals.js also builds a report object, containing more information.  Access it by calling <code class="js inline">BADGLOBALS.report()</code>.  This will run <code class="js inline">.check()</code> if it has not run already.  The report object has the following properties:</p>
<ul>
	<li><strong>bad:</strong> An array of the names of the bad globals found.</li>
	<li><strong>good:</strong> An array of the names of the good globals found.</li>
	<li><strong>skipped:</strong> An array of the names of the globals that were not checked.</li>
</ul>
<p>And that's all there is to badglobals.js.  It's really simple to use, but remarkably effective.</p>
<h2>How It Works</h2>
<p>badglobals.js works because of one key difference between implied/window globals and declared globals:  <strong>declared globals cannot be deleted</strong>.  This is because using <code class="js inline">var</code> causes the internal property [[DontDelete]] to be set.</p>
<pre class="js">var x = 1;
y = 2;
window.z = 3;

delete x; // false
delete y; // true
delete z; // true

x; // 1
y; // undefined
z; // undefined</pre>
<p>badglobals.js simply tries to delete every property of window (skipping the built-ins, of course).  If the delete succeeds, it was declared wrong.  It always puts it back, but I wouldn't trust this to run in production code, because it just <em>seems dangerous</em>.  Here's the core section of badglobals.js:</p>
<pre class="js">for (prop in window) {
	if (window.hasOwnProperty(prop)) {
		if (skip.indexOf(prop) >= 0 || exclude.indexOf(prop) >= 0) {
			skipped.push(prop);
		} else {
			val = window[prop];
			if (delete window[prop]) {
				console.warn("Found non-var global %o with value %o", prop, val);
				bad.push(prop);
				try {
					window[prop] = val;
				} catch (e) {
					console.error("Oops, there was an error putting %o back :(", prop);
				}
			} else {
				good.push(prop);
			}
		}
	}
}</pre>
<h3>Browser Support</h3>
<p>This script will not work in Internet Explorer, because I use the array <code class="js inline">indexOf</code> method, among other things.  I also think IE doesn't exactly follow the standard when it comes to <code class="js inline">delete</code>, so the checks might not work.  I don't consider this a problem, because this is a <strong>developer tool</strong>, not production code.  You'll find the complete set of bad globals with Firefox or Chrome, so you should not need to check in Internet Explorer as well.  I have not tested it in Opera, but the <code class="js inline">console</code> references will certainly fail.</p>
<h3>Thanks to...</h3>
<p>I got the idea for this tool from the <a href="http://perfectionkills.com/understanding-delete/">excellent article</a> on <code class="js inline">delete</code> by kangax, over at <a href="http://perfectionkills.com">his blog</a>.  If you haven't read that article, you really should.  The depth and quality is incredible.</p>
<h2>Get badglobals.js</h2>
<p>Here are the links, one more time:</p>
<ul>
	<li><a href="http://www.bcherry.net/static/lib/js/badglobals.js">Raw Script</a></li>
	<li><a href="http://github.com/bcherry/bcherry/blob/master/bcherry-web/static/lib/js/badglobals.js">Script at GitHub</a></li>
	<li><a href="http://www.bcherry.net/badglobals">Demo Page</a></li>
</ul>

  </div>
</article>

  

  

  

  

  

  

  

  

  


        </div>

        <!-- Sidebar: Search, links, etc. -->
        <div id="sidebar" class="span-6 last">
          <hr class="space" />

          <div id="links">
            <h3>the author</h3>
            <p>
              Ben is a 25 year-old software engineer. He lives and works in San Francisco. Many people think he invented the term "hoisting" in JavaScript, but this is untrue.
            </p>
            <ul>
              <li><a href="http://twitter.com/bcherry">Twitter</a> - @<a class="twitter-anywhere-user" href="http://twitter.com/bcherry">bcherry</a></li>
              <li><a href="http://github.com/bcherry">GitHub</a> - My Code</li>
              <li><a href="http://www.linkedin.com/in/bcherryprogrammer">LinkedIn</a> - Professional Profile</li>
              <li><a href="http://www.facebook.com/bcherry">Facebook</a> - That Other Social Network</li>
              <li><a href="http://www.bcherry.net/talks/">Presentations</a> - Slides From My Talks</li>
            </ul>
            <iframe allowtransparency="true" frameborder="0" scrolling="no"
              src="http://platform.twitter.com/widgets/follow_button.html?screen_name=bcherry&amp;button=grey&amp;text_color=7F7F7F&amp;link_color=666666"
              style="width:300px; height:20px;"></iframe>
          </div>

          <hr />

          <div id="tags">
            <h3>categories</h3>
            <ul>
            
              <li>
                <a href="/tag/javascript">javascript</a>
                (18)
              </li>
            
              <li>
                <a href="/tag/social%20gaming">social gaming</a>
                (1)
              </li>
            
              <li>
                <a href="/tag/performance">performance</a>
                (4)
              </li>
            
              <li>
                <a href="/tag/jquery">jquery</a>
                (1)
              </li>
            
              <li>
                <a href="/tag/tools">tools</a>
                (2)
              </li>
            
              <li>
                <a href="/tag/html5">html5</a>
                (3)
              </li>
            
              <li>
                <a href="/tag/adequatelygood">adequatelygood</a>
                (1)
              </li>
            
              <li>
                <a href="/tag/timers">timers</a>
                (2)
              </li>
            
              <li>
                <a href="/tag/module%20pattern">module pattern</a>
                (3)
              </li>
            
              <li>
                <a href="/tag/talks">talks</a>
                (1)
              </li>
            
              <li>
                <a href="/tag/slide">slide</a>
                (1)
              </li>
            
              <li>
                <a href="/tag/python">python</a>
                (1)
              </li>
            
              <li>
                <a href="/tag/debugging">debugging</a>
                (1)
              </li>
            
              <li>
                <a href="/tag/testing">testing</a>
                (2)
              </li>
            
              <li>
                <a href="/tag/hashbang">hashbang</a>
                (1)
              </li>
            
            </ul>
          </div>

          <hr />

          
        </div>
      </div>
    </div>

    <!-- Exception Hub start -->
    <script src="http://js.exceptionhub.com/javascripts/eh.js"></script>
    <script>
    ExceptionHub.setup("8ff0f84d25456b049a9c1a83f8e62b56", 21, 'production');
    </script>
    <!-- Exception Hub end -->

    <script type="text/javascript" src="/js/jquery-1.3.2.min.js"></script>
    <!--<script type="text/javascript" src="/js/chili/jquery.chili-2.2.js"></script>-->
    <script type="text/javascript" src="/js/consul.js"></script>
    <script type="text/javascript">
      // ChiliBook.recipeFolder = "/js/chili/";
      consul.turnOn();
      jQuery.noConflict();

      var AG = {};
      // Page Script
    </script>

    <!-- Include LABjs and request the rest of the script files-->
    <script type="text/javascript" src="/js/LAB.min.js"></script>
    <script type="text/javascript">
      $LAB
      .script("/js/jquery-ui-1.7.2.custom.min.js")
      .script("/js/jquery.templates.js")
      .script("/js/base.js")
      .script("/js/ag.js")
    </script>

    <!-- Google Analytics -->
    <script type="text/javascript">var _gaq =_gaq||[]; _gaq.push(['_setAccount','UA-251077-4']);_gaq.push(['_trackPageview']);(function(){var ga=document.createElement('script');ga.type='text/javascript';ga.async=true;ga.src=('https:'==document.location.protocol?'https://ssl':'http://www')+'.google-analytics.com/ga.js';(document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(ga);})();</script>
  </body>
</html>
